#--------------------------------------
#Author: Jiahao.Xia
#--------------------------------------

from yacs.config import CfgNode as CN

import os

_C = CN()
_C.GPUS = (0, )
_C.WORKERS = 16
_C.PIN_MEMORY = True
_C.AUTO_RESUME = True
_C.PRINT_FREQ = 10


_C.DATASET = CN()
_C.DATASET.ROOT = "./Dataloader"
_C.DATASET.CHANNEL = 3
_C.DATASET.DATASET = 'WFLW'

_C.SYSTEM = CN()
_C.SYSTEM.NUM_GPUS = 1

_C.MODEL = CN()
_C.MODEL.NAME = "Sparase_alignment"
_C.MODEL.IMG_SIZE = 256
_C.MODEL.OUT_DIM = 256
_C.MODEL.SAMPLE_NUM = 7
_C.MODEL.TRAINABLE = True
_C.MODEL.INTER_LAYER = True
_C.MODEL.INIT_WEIGHTS = True
_C.MODEL.PRETRAINED = "./Config/hrnetv2_w18_imagenet_pretrained.pth"

_C.TRANSFORMER = CN()
_C.TRANSFORMER.NHEAD = 8
_C.TRANSFORMER.NUM_DECODER = 6
_C.TRANSFORMER.FEED_DIM = 1024

_C.CUDNN = CN()
_C.CUDNN.BENCHMARK = True
_C.CUDNN.DETERMINISTIC = False
_C.CUDNN.ENABLED = True

_C.LOSS = CN()
_C.LOSS.USE_TARGET_WEIGHT = True

_C.TRAIN = CN()
_C.TRAIN.TRAIN = True
_C.TRAIN.SHUFFLE = True
_C.TRAIN.LR = 0.0005
_C.TRAIN.LR_FACTOR = 0.1
_C.TRAIN.LR_STEP = [80, 90]
_C.TRAIN.OPTIMIZER = "adamw"
_C.TRAIN.BATCH_SIZE_PER_GPU = 16
_C.TRAIN.BEGIN_EPOCH = 0
_C.TRAIN.NUM_EPOCH = 100

_C.TEST = CN()
_C.TEST.BATCH_SIZE_PER_GPU = 16

_C.HYPERPARAMETERS = CN()

_C.WFLW = CN()
_C.WFLW.ROOT = './Data/WFLW'
_C.WFLW.NUM_POINT = 98
_C.WFLW.FRACTION = 1.20
_C.WFLW.SCALE = 0.05
_C.WFLW.ROTATION = 15
_C.WFLW.TRANSLATION = 0.05
_C.WFLW.OCCLUSION_MEAN = 0.20
_C.WFLW.OCCLUSION_STD = 0.08
_C.WFLW.DATA_FORMAT = "RGB"
_C.WFLW.FLIP = True
_C.WFLW.CHANNEL_TRANSFER = True
_C.WFLW.OCCLUSION = True
_C.WFLW.SHEAR = True
_C.WFLW.BRIGHTNESS = True
_C.WFLW.INITIAL_PATH = './Config/init_98.npz'

# High-Resoluion Net
_C.MODEL.EXTRA = CN()
_C.MODEL.EXTRA.PRETRAINED_LAYERS = ['*']
_C.MODEL.EXTRA.STEM_INPLANES = 64
_C.MODEL.EXTRA.FINAL_CONV_KERNEL = 1
_C.MODEL.EXTRA.WITH_HEAD = True

_C.MODEL.EXTRA.STAGE2 = CN()
_C.MODEL.EXTRA.STAGE2.NUM_MODULES = 1
_C.MODEL.EXTRA.STAGE2.NUM_BRANCHES = 2
_C.MODEL.EXTRA.STAGE2.NUM_BLOCKS = [4, 4]
_C.MODEL.EXTRA.STAGE2.NUM_CHANNELS = [18, 36]
_C.MODEL.EXTRA.STAGE2.BLOCK = 'BASIC'
_C.MODEL.EXTRA.STAGE2.FUSE_METHOD = 'SUM'

_C.MODEL.EXTRA.STAGE3 = CN()
_C.MODEL.EXTRA.STAGE3.NUM_MODULES = 4
_C.MODEL.EXTRA.STAGE3.NUM_BRANCHES = 3
_C.MODEL.EXTRA.STAGE3.NUM_BLOCKS = [4, 4, 4]
_C.MODEL.EXTRA.STAGE3.NUM_CHANNELS = [18, 36, 72]
_C.MODEL.EXTRA.STAGE3.BLOCK = 'BASIC'
_C.MODEL.EXTRA.STAGE3.FUSE_METHOD = 'SUM'

_C.MODEL.EXTRA.STAGE4 = CN()
_C.MODEL.EXTRA.STAGE4.NUM_MODULES = 3
_C.MODEL.EXTRA.STAGE4.NUM_BRANCHES = 4
_C.MODEL.EXTRA.STAGE4.NUM_BLOCKS = [4, 4, 4, 4]
_C.MODEL.EXTRA.STAGE4.NUM_CHANNELS = [18, 36, 72, 144]
_C.MODEL.EXTRA.STAGE4.BLOCK = 'BASIC'
_C.MODEL.EXTRA.STAGE4.FUSE_METHOD = 'SUM'


def update_config(cfg, args):
    cfg.defrost()

    if args.modelDir:
        cfg.OUTPUT_DIR = args.modelDir

    if args.logDir:
        cfg.LOG_DIR = args.logDir

    if args.dataDir:
        cfg.DATA_DIR = args.dataDir

    if args.target:
        cfg.TARGET = args.target

    cfg.DATASET.ROOT = os.path.join(
        cfg.DATA_DIR, cfg.DATASET.ROOT
    )

    if cfg.MODEL.PRETRAINED is not None:
        cfg.MODEL.PRETRAINED = os.path.join(
            cfg.DATA_DIR, cfg.MODEL.PRETRAINED
        )
    else:
        cfg.MODEL.PRETRAINED = None

    cfg.freeze()
